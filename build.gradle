import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
  id 'jacoco'
  id 'checkstyle'
  id 'org.openapi.generator' version '6.0.0'
  id 'org.sonarqube' version '3.4.0.2513'
}

group = 'it.tccr'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

ext.versions = [
  jacksonDatabindNullableVersion: "0.2.2",
  logbackSlackAppenderVersion   : "1.6.1",
  checkstyleVersion             : "8.39",
  vavrVersion                   : "0.10.4"
]

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  implementation "io.vavr:vavr:${versions.vavrVersion}"
  implementation "org.openapitools:jackson-databind-nullable:${versions.jacksonDatabindNullableVersion}"
  // TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testAnnotationProcessor 'org.projectlombok:lombok'
  // LOGGING
}

sourceSets {
  main.java.srcDirs += "src/gen/java"
}

tasks.named('test') {
	useJUnitPlatform()
  jacoco {
    destinationFile = file("$buildDir/jacoco/${name}.exec")
  }
}

// OPENAPI GENERATOR
task cleanOpenApiGenerate(type: Delete, description: 'Deletes OpenAPI generated files') {
  delete fileTree(dir: "$rootDir/src/gen/java".toString(), exclude: "**/.openapi-generator-ignore")
}

clean.dependsOn tasks.cleanOpenApiGenerate

compileJava.dependsOn tasks.openApiGenerate

openApiGenerate {
  generatorName = "spring"
  inputSpec = "$rootDir/src/main/resources/openapi/openapi.yaml".toString()
  outputDir = "$rootDir/src/gen/java".toString()
  apiPackage = "it.tccr.puppet.api"
  modelPackage = "it.tccr.puppet.api.model"
  generateApiDocumentation = false
  generateModelDocumentation = false
  configOptions = [
    dateLibrary: "java8",
    documentationProvider: "none",
    interfaceOnly: "true",
    useOptional: "true",
    useBeanValidation: "false",
    sourceFolder: "",
    hideGenerationTimestamp: "true"
  ]
}

// JACOCO

jacoco {
  toolVersion = '0.8.7'
}
tasks.withType(Test) {
  finalizedBy jacocoTestReport
}

ext {
  jacocoMergedReport = file("$buildDir/jacoco/mergeTest.exec")
}

task jacocoMergeTestReport(type: JacocoMerge) {
  executionData tasks.withType(Test)
  destinationFile = jacocoMergedReport
}

jacocoTestReport {
  dependsOn jacocoMergeTestReport
  executionData jacocoMergedReport
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
    html.destination file("${buildDir}/reports/jacocoHtml")
  }
}

// CHECKSTYLE
checkstyle {
  toolVersion = "${versions.checkstyleVersion}"
}
checkstyleMain.source = "src/main/java"
checkstyleTest.source = "src/test/java"

// SONARCLOUD

sonarqube {
  properties {
    property "sonar.projectKey", "gilbertotcc_playground-spring"
    property "sonar.organization", "gilbertotcc-github"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.exclusions", "src/gen/**"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.java.checkstyle.reportPaths", "$buildDir/reports/checkstyle/main.xml,$buildDir/reports/checkstyle/test.xml,$buildDir/reports/checkstyle/integrationTest.xml"
    property "sonar.java.checkstyle.reportPaths", "$buildDir/reports/checkstyle/main.xml,$buildDir/reports/checkstyle/test.xml,$buildDir/reports/checkstyle/integrationTest.xml,$buildDir/reports/checkstyle/contractTest.xml"
  }
}

// OPENAPI CLIENT GENERATOR
task buildTypeScriptClient(type: GenerateTask){
  generatorName = "typescript-axios"
  inputSpec = "$rootDir/src/main/resources/openapi/openapi.yaml".toString()
  outputDir = "$buildDir/client/typescript-axios".toString()
  generateApiTests = false
  generateModelTests = false
}

task buildPythonClient(type: GenerateTask){
  generatorName = "python"
  inputSpec = "$rootDir/src/main/resources/openapi/openapi.yaml".toString()
  outputDir = "$buildDir/client/python".toString()
  generateApiTests = false
  generateModelTests = false
}

task buildClients(dependsOn: ['buildTypeScriptClient', 'buildPythonClient'])
